import time
import random

# Algoritmo de ordenamiento burbuja
def metodo_burbuja(lista):
    for i in range(len(lista)):
        for j in range(0, len(lista) - i - 1):
            if lista[j] > lista[j + 1]:
                lista[j], lista[j + 1] = lista[j + 1], lista[j]
    return lista

# Algoritmo de ordenamiento quick sort
def quick_sort(lista):
    if len(lista) < 2:
        return lista
    else:
        pivote = lista[0]
        menores = [x for x in lista[1:] if x < pivote]
        mayores = [x for x in lista[1:] if x >= pivote]
        return quick_sort(menores) + [pivote] + quick_sort(mayores)

# Función para medir el tiempo de ejecución
def medir_tiempo(algoritmo, lista):
    inicio = time.time()
    algoritmo(lista.copy())  # Copiamos la lista para no modificar la original
    fin = time.time()
    return fin - inicio

# Tamaños de las listas a probar
tamanos = [100, 2000, 5000, 10000]

# Comparación de tiempos para cada tamaño de lista
for tam in tamanos:
    lista_random = [random.randint(1, tam * 10) for _ in range(tam)]  # Lista de números aleatorios con repetición

    print(f"\nOrdenando lista de {tam} elementos:")

    tiempo_burbuja = medir_tiempo(metodo_burbuja, lista_random)
    print(f"Tiempo del método de burbuja: {tiempo_burbuja:.6f} segundos")

    tiempo_quick_sort = medir_tiempo(quick_sort, lista_random)
    print(f"Tiempo del Quick Sort: {tiempo_quick_sort:.6f} segundos")
